#!/usr/bin/python
#
# Usage: check_v2p_pins.py <pin_list.csv> <pins.txt>
# where the CSV file is generated by the xilinx tools
# and pins.txt is (manually!) extracted from the Schematic PDF
#
# Check pin numbers for the V2P between what is generated by the
# Xilinx tool and what is on the schematic.
# For the schematic, we can only generate a pin list by cut and pasting
# from the PDF, which is really ugly, but better than checking 1152
# pins by hand each time!

import sys
import re

# how many pins do we have?
package_pins = 1152

csv_pins = {}

def usage():
    """ Tell the user how to use the script """
    print "Usage: " + sys.argv[0] + " <pin_list.csv> <pins.txt>\n"



def is_pin(pin):
    """ Given a string see if it is a pin.
    Return True or False
    """

    m = re.match('[A-Z]\d{1,2}', pin)
    if m: return True

    m = re.match('A[A-P]\d{1,2}', pin)
    if m: return True
    else: return False



def get_csv_signal_of(csv):
    """ Read the file from the csv filehandle and extract a dictionary
    that maps pin numbers to signal names
    """

    d = dict()

    for line in csv:
        # look for serial Rx and Tx
        m = re.search('^([A-Z]{1,2}\d{1,2}),,.*?,((?:R|T)X(?:P|N)PAD\d{1,2}).*?,UNUSED', line)
        if m:
            pin, signal = m.group(1), m.group(2)

            # Process Tx Pads

            m = re.search('TX(N|P)PAD(\d{1,2})', signal)
            if m:
                # all TxPADs except 14 and 16 are NC
                if (m.group(2) != '14' and m.group(2) != '16'):
                    signal = 'UNUSED'
                else:
                    signal = 'TX' + m.group(1) + m.group(2)
            else:
                m = re.search('(RX(?:N|P))PAD(\d{1,2})', signal)
                # we were inconsistent in naming the RXPADS - 14 and 16 are just RXN or RXP
                if m:
                    if (m.group(2) == '14' or m.group(2) == '16' ):
                        signal = m.group(1) + m.group(2)

            d[pin] = signal.upper()

            continue

        # look for any VREFs from Bank 3
        m = re.search('^([A-Z]{1,2}\d{1,2}),.*?VREF_3,UNUSED', line)
        if m:
            pin = m.group(1)
            d[pin] = 'VREF3'
            continue

        # look for any VREFs from Bank 3
        m = re.search('^([A-Z]{1,2}\d{1,2}),.*?VR(P|N)_3,UNUSED', line)
        if m:
            pin = m.group(1)
            d[pin] = 'VR' + m.group(2)
            continue

        # look for programming data pins
        m = re.search('^([A-Z]{1,2}\d{1,2}),,DIFF.*?,IO_L.*?/D(\d),UNUSED', line)
        if m:
            pin = m.group(1)
            d[pin] = 'RP_DATA' + m.group(2)
            continue

        # look for programming control pins
        m = re.search('^([A-Z]{1,2}\d{1,2}).*INIT_B,UNUSED', line)
        if m:
            pin = m.group(1)
            d[pin] = 'RP_INIT_B' ; continue

        # look for programming control pins
        m = re.search('^([A-Z]{1,2}\d{1,2}).*RDWR_B,UNUSED', line)
        if m:
            pin = m.group(1)
            d[pin] = 'RP_RDWR_B' ; continue

        # look for programming control pins
        m = re.search('^([A-Z]{1,2}\d{1,2}).*CS_B,UNUSED', line)
        if m:
            pin = m.group(1)
            d[pin] = 'RP_CS_B' ; continue

        # look for programming control pins
        m = re.search('^([A-Z]{1,2}\d{1,2}),,,CCLK,,,', line)
        if m:
            pin = m.group(1)
            d[pin] = 'RP_CCLK' ; continue

        # look for programming control pins
        m = re.search('^([A-Z]{1,2}\d{1,2}),,,DONE,,,', line)
        if m:
            pin = m.group(1)
            d[pin] = 'RP_DONE' ; continue

        # look for programming control pins
        m = re.search('^([A-Z]{1,2}\d{1,2}),,,PROG_B,,,', line)
        if m:
            pin = m.group(1)
            d[pin] = 'RP_PROG_B' ; continue

        # look for any other unused
        m = re.search('^([A-Z]{1,2}\d{1,2}),.*?,.*?,.*?,UNUSED', line)
        if m:
            pin = m.group(1)
            d[pin] = 'UNUSED'
            continue

        # look for the special pins and pwr/gnd and nc
        m = re.search('^([A-Z]{1,2}\d{1,2}),,,(.*?),,,.*?,,,,,.*?,,,,,', line)
        if m:
            pin, signal = m.group(1), m.group(2)
            d[pin] = signal.upper()
            if d[pin] == 'NC':
                d[pin] = 'UNUSED'
            continue


        # The rest are general signals
        m = re.search('^([A-Z]{1,2}\d{1,2}),(.*?),(?:IOB|DIFF)', line)
        if m:
            pin, signal = m.group(1), m.group(2)
            d[pin] = signal.upper()
            continue

        # All other lines are comments or blank or the title line
        m = re.search('^\s*#', line)
        if m:
            continue
        m = re.search('^\s$', line)
        if m:
            continue
        m = re.search('^Pin Number,Signal Name,Pin Usage', line)
        if m:
            continue

        print "ERROR: unexpected line in csv file:\n" + line

    return d

#----------------------------------------------------------------------------

def get_txt_signal_of(txt):
    """ Read the file from the txt filehandle and extract a dictionary
    that maps pin numbers to signal names
    """

    # Make a map of sig names in the txt file, and what they are in CSV
    csv_of = { 'AVTTXPAD4'            : 'VTTXPAD4',
               'AVTTXPAD11'           : 'VTTXPAD11',
               'AVTTXPAD20'           : 'VTTXPAD20',
               'AVTTX14'              : 'VTTXPAD14',
               'VTRX16'               : 'VTRXPAD16',
               'VTRX14'               : 'VTRXPAD14',
               'VTTX16'               : 'VTTXPAD16',
               'CNTRL0_DDR2_CK0B'     : 'CNTRL0_DDR2_CLK0B',
               'CNTRL0_DDR2_CLK0'     : 'CNTRL0_DDR2_CLK0',
               'CNTRL0_DDR2_CK1B'     : 'CNTRL0_DDR2_CLK1B',
               'CNTRL0_DDR2_CK1'      : 'CNTRL0_DDR2_CLK1',
               'CNTRL0_DDR2_ODT0'     : 'CNTRL0_DDR2_ODT0',
               'CNTL0_RST_DQS_DIV_IN' : 'CNTRL0_RST_DQS_DIV_IN',
               'CNTL0_RST_DQS_DIV_OUT': 'CNTRL0_RST_DQS_DIV_OUT',
               'DEBUG_CLK1'           : 'DEBUG_CLK(1)',
               'DEBUG_CLK0'           : 'DEBUG_CLK(0)',
               'TCLK'                 : 'TCK',
             }

    d = dict()

    for line in txt:

        # some of the contents of the file might be crap so do some validation
        words = line.split()

        if len(words) == 0: continue
        elif len(words) == 1:
            print "Discarding line'%s'\n" % line
            continue
        elif len(words) > 2:
            print "ERROR: Line '%s' should probably be split.\n" % line
            continue

        # OK, so we have 2 words. At least one should be a pin.
        # We want it to be: <signal> <pin>

        if is_pin(words[0]):
            line = words[1] + ' ' + words[0]
        elif is_pin(words[1]):
            pass
        else:
            print "ERROR: Line '%s' doesnt seem to have a pin\n" % line
            break


        m = re.match('(\S+)\s+([A-Z]{1,2}\d{1,2})', line)
        if m:
            signal, pin = m.group(1), m.group(2)

            if signal in csv_of:
                #print "Found specific signal %s\n" % signal
                d[pin] = csv_of[signal] ; continue

            # munge a bunch of signal names to match up with what's in the verilog

            m = re.match('GND\d+', signal)
            if m:
                signal = 'GND'
                d[pin] = signal ; continue

            m = re.match('(VCC(?:INT|AUX))\d+', signal)
            if m:
                signal = m.group(1)
                d[pin] = signal ; continue

            m = re.match('(VCCO_\d)_\d', signal)
            if m:
                signal = m.group(1)
                d[pin] = signal ; continue

            m = re.match('VREF\d', signal)
            if m:
                signal = 'VREF3'
                d[pin] = signal ; continue

            m = re.match('NC\d+', signal)
            if m:
                signal = 'UNUSED'
                d[pin] = signal ; continue

            m = re.match('UNUSED\d+', signal)
            if m:
                signal = 'UNUSED'
                d[pin] = signal ; continue

            m = re.match('(CPCI(?:_DMA)?_(?:DATA|ADDR))(\d+)$', signal)
            if m:
                signal = m.group(1) + '(' + m.group(2) + ')'
                d[pin] = signal ; continue

            m = re.match('(CNTRL0_DDR2_[A-Z]+)(\d+)$', signal)
            if m:
                signal = m.group(1) + '(' + m.group(2) + ')'
                d[pin] = signal ; continue

            m = re.match('(CNTRL0_DDR2_DQS)(\d)_N$', signal)
            if m:
                signal = m.group(1) + '_N(' + m.group(2) + ')'
                d[pin] = signal ; continue

            m = re.match('((?:SRAM1|SRAM2|DEBUG)_(?:DATA|ADDR|BW))(\d+)$', signal)
            if m:
                signal = m.group(1) + '(' + m.group(2) + ')'
                d[pin] = signal ; continue

            m = re.match('(CPCI_DEBUG_DATA)_(\d+)$', signal)
            if m:
                signal = m.group(1) + '(' + m.group(2) + ')'
                d[pin] = signal ; continue

            m = re.match('(RGMII.*D)(\d)$', signal)
            if m:
                signal = m.group(1) + '(' + m.group(2) + ')'
                d[pin] = signal ; continue

            m = re.match('(CPCI_.*)(\d)$', signal)
            if m:
                signal = m.group(1) + '(' + m.group(2) + ')'
                d[pin] = signal ; continue

            if (pin in d) :
                print "ERROR: pin %s defined twice: %s and %s" % (pin,d[pin],signal)
                print "      (Xilinx has pin %s as %s)" % (pin, csv_pins[pin])
                print pin
                continue

            d[pin] = signal

            # print "Pin %s -> Sig %s\n" % (pin, signal)

        else:
            print "Whoops: bad line ", line



    return d


# ------------------------ MAIN

if (len(sys.argv) != 3):
    usage()
    sys.exit()

try:
    csv = open(sys.argv[1], 'r')
except IOError:
    print "ERROR: Unable to open file " + sys.argv[1] + "\n"
    sys.exit()

try:
    txt = open(sys.argv[2], 'r')
except IOError:
    print "ERROR: Unable to open file " + sys.argv[2] + "\n"
    sys.exit()

# Extract pin name, number info from the CSV file

csv_pins = get_csv_signal_of(csv)

if (len(csv_pins) != package_pins):
    print "ERROR: in CSV file we expected ",package_pins,"pins but only saw ", len(csv_pins)
else:
    print "Info: Good: CSV file has", package_pins, "pins"


txt_pins = get_txt_signal_of(txt)

if (len(txt_pins) != package_pins):
    print "ERROR: in TXT file we expected ",package_pins,"pins but only saw ", len(txt_pins)
else:
    print "Info: Good: TXT file has", package_pins, "pins"

mismatches = 0
missing    = 0

for pin,signal in csv_pins.iteritems():
    if pin in txt_pins:
        if ( txt_pins[pin] != csv_pins[pin] ):
            print "mismatch: pin <%s> CSV: <%s> text: <%s>\n" % ( pin, csv_pins[pin], txt_pins[pin] )
            #print "JIM: ",pin,csv_pins[pin]
            mismatches += 1

    else:
        missing += 1
        print "missing: pin",pin,"CSV",csv_pins[pin]," not in text file"

print "Saw",mismatches,"mismatches"
print "Saw",missing,"missing"
